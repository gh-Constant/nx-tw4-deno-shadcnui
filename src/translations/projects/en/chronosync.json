{
  "title": "ChronoSync",
  "description": "A modern time management app tool built for developers. Designed to help you focus on what matters most.",
  "longDescription": "ChronoSync is a comprehensive time management solution designed specifically for developers and creative professionals. The application combines modern web technologies with a native desktop application to provide seamless time tracking across all platforms.",
  "year": "2024",
  "technologies": ["Nuxt.js", "Vue.js", "Tailwind CSS", "C++", "Express.js", "PostgreSQL"],
  "sections": [
    {
      "type": "title",
      "content": "Project Overview"
    },
    {
      "type": "text",
      "content": "ChronoSync represents a modern approach to time management, specifically designed for developers and creative professionals. The application seamlessly integrates web and desktop technologies to provide a unified experience across all platforms."
    },
    {
      "type": "title",
      "content": "Architecture"
    },
    {
      "type": "image",
      "image": "/images/chronosync/nx.png",
      "caption": "Figure 2 : NX monorepo architecture for optimized project management"
    },
    {
      "type": "text",
      "content": "Figure 2 shows a screenshot of the 'packages' folder from ChronoSync's GitHub repository. It contains four directories: desktop, mobile, web, and shared. Each corresponds to a different version of the application (desktop, mobile, and web browser), while the shared folder contains common code used across all platforms. This demonstrates the use of a mono-repository structure - a single project grouping all platforms together, making it easy to share code."
    },
    {
      "type": "text",
      "content": "As indicated in the caption, this mono-repository was set up using Nx, a tool designed to organize this type of project, and pnpm, a modern package manager used to install, compile, and manage different parts of the application. This structure enables parallel development across multiple platforms while maintaining overall project coherence."
    },
    {
      "type": "text",
      "content": "This organization demonstrates a solid understanding of multi-platform architecture. Grouping different versions of the application within a single repository allows for code reuse, centralizes business logic, and limits duplication. It also facilitates project scalability and simplifies synchronization between teams or modules. While I've only experienced this architecture in this project, I feel capable of effectively integrating into or contributing to other similarly structured projects."
    },
    {
      "type": "text",
      "content": "The choice of pnpm over npm or yarn aligns with performance and maintainability goals. In a JavaScript/TypeScript project, the package manager is an essential tool for installing and organizing project libraries. I chose pnpm for its concrete advantages: fast installation, disk space efficiency through symlinks, and better dependency management. This allowed me to effectively manage multiple packages in parallel within a mono-repo environment while maintaining consistent versions. I now consider myself quite proficient in using package managers like pnpm, npm, or bun, having used them in most of my personal and professional projects, particularly when creating websites like task managers."
    },
    {
      "type": "text",
      "content": "The implementation of the shared package demonstrates a clear intention to optimize project structure. This module contains common functions, types, or models used across all platforms, ensuring uniform logic and reducing errors or inconsistencies. However, I believe I still have room for improvement in using this type of package, particularly when sharing code between different technologies or languages - an aspect I didn't explore deeply in this project. On the other hand, regarding general code modularity, I believe I have a good level of expertise. For example, in my 'Power X' project, a video game developed in Java, I applied the MVC pattern, which helped me better organize the code and make it more readable and maintainable."
    },
    {
      "type": "image",
      "image": "/images/chronosync/backend.png",
      "caption": "Express.js API for centralized data and service management"
    },
    {
      "type": "text",
      "content": "The backend is developed with Express.js, providing a robust and performant REST API. This architecture enables smooth communication between web and desktop applications, with centralized data and authentication management."
    },
    {
      "type": "title",
      "content": "Web Authentication"
    },
    {
      "type": "image",
      "image": "/images/chronosync/login.png",
      "caption": "Web login interface with modern authentication system"
    },
    {
      "type": "text",
      "content": "The web login interface offers a modern and intuitive authentication experience with responsive design and secure credential management."
    },
    {
      "type": "title",
      "content": "Desktop Application"
    },
    {
      "type": "image",
      "image": "/images/chronosync/logindesktop.png",
      "caption": "Desktop application login screen with native styling"
    },
    {
      "type": "text",
      "content": "The desktop application features a native login screen that integrates perfectly with the operating system while maintaining the same security standards as the web version."
    },
    {
      "type": "title",
      "content": "Token & URI Management"
    },
    {
      "type": "video",
      "video": "/videos/chronosync/URIshowcase.mp4",
      "caption": "URI request demonstration showing authentication token generation and management",
      "muted": true
    },
    {
      "type": "text",
      "content": "The authentication system demonstrates how URI requests handle token generation and management for secure desktop application access."
    },
    {
      "type": "title",
      "content": "Core Features"
    },
    {
      "type": "image",
      "image": "/images/chronosync/database.png",
      "caption": "Database architecture and data management system"
    },
    {
      "type": "image",
      "image": "/images/chronosync/email.png",
      "caption": "Email notification system for project updates and reminders"
    },
    {
      "type": "text",
      "content": "The application provides a comprehensive dashboard for time tracking, project management, and productivity analysis. Users can easily switch between web and desktop interfaces while maintaining synchronized data."
    },
    {
      "type": "title",
      "content": "Advanced Algorithms"
    },
    {
      "type": "image",
      "image": "/images/chronosync/blurryAlgorithm.png",
      "caption": "Blur detection algorithm for focus tracking and productivity measurement"
    },
    {
      "type": "image",
      "image": "/images/chronosync/closeAlgorithm.png",
      "caption": "Session closure algorithm for automatic time tracking and data preservation"
    },
    {
      "type": "text",
      "content": "ChronoSync implements sophisticated algorithms for time optimization and productivity analysis, including blur detection for focus tracking and intelligent session management."
    },
    {
      "type": "title",
      "content": "Integrations"
    },
    {
      "type": "image",
      "image": "/images/chronosync/clickup.png",
      "caption": "ClickUp integration for seamless project management workflow"
    },
    {
      "type": "text",
      "content": "The platform integrates seamlessly with popular project management tools and provides comprehensive API access for custom workflows and third-party applications."
    },
    {
      "type": "title",
      "content": "Technical Stack"
    },
    {
      "type": "text",
      "content": "Frontend developed with Nuxt.js and Vue.js, leveraging server-side rendering for optimal performance. Express.js backend with PostgreSQL for robust data management. Desktop application in C++ for native performance."
    }
  ]
}